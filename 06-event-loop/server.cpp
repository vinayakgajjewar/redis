#include <assert.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <errno.h>

#include <fcntl.h>
#include <poll.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <netinet/ip.h>

#include <vector>

static void msg(const char *msg) {
    fprintf(stderr, "%s\n", msg);
}

static void msg_errno(const char *msg) {
    fprintf(stderr, "[errno:%d] %s\n", errno, msg);
}

static void die(const char *msg) {
    fprintf(stderr, "[%d] %s\n", errno, msg);
    abort();
}

/*
 * TODO
 * What does this function do?
 */
static void fd_set_nb(int fd) {
    errno = 0;
    int flags = fcntl(fd, F_GETFL, 0);
    if (errno) {
        die("fcntl error");
        return;
    }
    flags |= O_NONBLOCK;
    errno = 0;
    (void) fcntl(fd, F_SETFL, flags);
    if (errno) {
        die("fcntl error");
    }
}

/*
 * This is likely larger than the size of the kernel buffer.
 */
const size_t k_max_msg = 32 << 20;

/*
 * With an event loop, an application task can span multiple loop iterations, so
 * we must store the state somewhere.
 */
struct Conn {
    int fd = -1;

    /*
     * For the event loop.
     */
    bool want_read = false;
    bool want_write = false;
    bool want_close = false;

    /*
     * Data to be parsed by the application.
     */
    std::vector<uint8_t> incoming;

    /*
     * Responses generated by the application. A large response may take
     * multiple loop iterations to complete, so the response data must be
     * buffered.
     */
    std::vector<uint8_t> outgoing;
};

/*
 * Append to the back.
 */
static void buf_append(std::vector<uint8_t> &buf, const uint8_t *data, size_t len) {
    buf.insert(buf.end(), data, data + len);
}

/*
 * Remove from the front.
 */
static void buf_consume(std::vector<uint8_t> &buf, size_t n) {
    buf.erase(buf.begin(), buf.begin() + n);
}

/*
 * Application callback for when the listening socket is ready.
 */

static Conn *handle_accept(int fd) {
    struct sockaddr_in client_addr = {};
    socklen_t addrlen = sizeof(client_addr);
    int connfd = accept(fd, (struct sockaddr *) &client_addr, &addrlen);
    if (connfd < 0) {
        msg_errno("accept() error");
        return NULL;
    }
    uint32_t ip = client_addr.sin_addr.s_addr;

    /*
     * This is a fancy way of printing out an IP address.
     */
    fprintf(stderr, "new client from %u.%u.%u.%u:%u\n", ip & 255, (ip >> 8) & 255, (ip >> 16) & 255, ip >> 24,
            ntohs(client_addr.sin_port));

    /*
     * Set the new connection to nonblocking mode.
     */
    fd_set_nb(connfd);

    Conn *conn = new Conn();
    conn->fd = connfd;
    conn->want_read = true;
    return conn;
}

/*
 * Process one request if there is enough data.
 */
static bool try_one_request(Conn *conn) {

    /*
     * Try to parse the message header.
     */
    if (conn->incoming.size() < 4) {
        return false;
    }
    uint32_t len = 0;
    memcpy(&len, conn->incoming.data(), 4);
    if (len > k_max_msg) {
        msg("too long");
        conn->want_close = true;
        return false;
    }

    /*
     * Check if we have the entire message body.
     */
    if (4 + len > conn->incoming.size()) {
        return false;
    }
    const uint8_t *request = &conn->incoming[4];

    /*
     * We got one request. Now do some application logic.
     */
    printf("client says: len:%d data:%.*s\n", len, len < 100 ? len : 100, request);

    /*
     * Generate the response. Append the header and then the message body.
     */
    buf_append(conn->outgoing, (const uint8_t *) &len, 4);
    buf_append(conn->outgoing, request, len);

    /*
     * Now that we're done with the application logic, remove the request
     * message from the buffer. Note that we can't just empty the buffer here.
     */
    buf_consume(conn->incoming, 4 + len);
    return true;
}

/*
 * Application callback for when the socket is writable.
 */
static void handle_write(Conn *conn) {
    assert(conn->outgoing.size() > 0);
    ssize_t rv = write(conn->fd, &conn->outgoing[0], conn->outgoing.size());
    if (rv < 0 && errno == EAGAIN) {
        return;
    }
    if (rv < 0) {
        msg_errno("write() error");
        conn->want_close = true;
        return;
    }

    /*
     * Remove the written data from our buffer.
     */
    buf_consume(conn->outgoing, (size_t) rv);

    /*
     * Update our readiness intention.
     */
    if (conn->outgoing.size() == 0) {
        conn->want_read = true;
        conn->want_write = false;
    }
}

/*
 * Application callback for when the socket is readable.
 */
static void handle_read(Conn *conn) {
    uint8_t buf[64 * 1024];
    ssize_t rv = read(conn->fd, buf, sizeof(buf));
    if (rv < 0 && errno == EAGAIN) {
        return;
    }
    if (rv < 0) {
        msg_errno("read() error");
        conn->want_close = true;
        return;
    }
    if (rv == 0) {
        if (conn->incoming.size() == 0) {
            msg("client closed");
        } else {
            msg("unexpected EOF");
        }
        conn->want_close = true;
        return;
    }

    /*
     * We got some new data.
     */
    buf_append(conn->incoming, buf, (size_t) rv);

    /*
     * Parse requests and generate responses.
     */
    while (try_one_request(conn)) {}

    /*
     * Update our readiness intention.
     */
    if (conn->outgoing.size() > 0) {
        conn->want_read = false;
        conn->want_write = true;

        /*
         * The socket is likely ready to write. Try to write it.
         */
        return handle_write(conn);
    }
}

int main() {
    int fd = socket(AF_INET, SOCK_STREAM, 0);
    if (fd < 0) {
        die("socket()");
    }
    int val = 1;
    setsockopt(fd, SOL_SOCKET, SO_REUSEADDR, &val, sizeof(val));

    /*
     * Bind the socket to the file descriptor.
     */
    struct sockaddr_in addr = {};
    addr.sin_family = AF_INET;
    addr.sin_port = ntohs(1234);
    addr.sin_addr.s_addr = ntohl(0);
    int rv = bind(fd, (const sockaddr *) &addr, sizeof(addr));
    if (rv) {
        die("bind()");
    }

    /*
     * Set the file descriptor to non-blocking mode.
     */
    fd_set_nb(fd);
    rv = listen(fd, SOMAXCONN);
    if (rv) {
        die("listen()");
    }

    /*
     * This is a map of all client connections, keyed by file descriptor. This
     * array will be densely packed because file descriptors are allocated to
     * the smallest available non-negative integer.
     */
    std::vector<Conn *> fd2conn;

    /*
     * The event loop.
     */
    std::vector<struct pollfd> poll_args;
    while (true) {

        /*
         * Prepare the arguments for the poll().
         */
        poll_args.clear();

        /*
         * Put the listening sockets in the first position.
         */
        struct pollfd pfd = {fd, POLLIN, 0};
        poll_args.push_back(pfd);

        /*
         * The rest are connection sockets.
         */
        for (Conn *conn: fd2conn) {
            if (!conn) {
                continue;
            }

            /*
             * Always poll() for POLLERR.
             */
            struct pollfd pfd = {conn->fd, POLLERR, 0};

            /*
             * poll() flags from the application's intent.
             */
            if (conn->want_read) {
                pfd.events |= POLLIN;
            }
            if (conn->want_write) {
                pfd.events |= POLLOUT;
            }
            poll_args.push_back(pfd);
        }

        /*
         * Wait for readiness.
         */
        int rv = poll(poll_args.data(), (nfds_t) poll_args.size(), -1);
        if (rv < 0 && errno == EINTR) {
            continue;
        }
        if (rv < 0) {
            die("poll");
        }

        /*
         * Handle the listening socket.
         */
        if (poll_args[0].revents) {
            if (Conn *conn = handle_accept(fd)) {

                /*
                 * Put it into the map.
                 */
                if (fd2conn.size() <= (size_t) conn->fd) {
                    fd2conn.resize(conn->fd + 1);
                }
                assert(!fd2conn[conn->fd]);
                fd2conn[conn->fd] = conn;
            }
        }

        /*
         * Handle connection sockets.
         *
         * Note: skip the first.
         */
        for (size_t i = 1; i < poll_args.size(); ++i) {
            uint32_t ready = poll_args[i].revents;
            if (ready == 0) {
                continue;
            }
            Conn *conn = fd2conn[poll_args[i].fd];
            if (ready & POLLIN) {
                assert(conn->want_read);
                handle_read(conn);
            }
            if (ready & POLLOUT) {
                assert(conn->want_write);
                handle_write(conn);
            }

            /*
             * Close the socket from socket error or application logic.
             */
            if ((ready & POLLERR) || conn->want_close) {
                (void) close(conn->fd);
                fd2conn[conn->fd] = NULL;
                delete conn;
            }
        }
    }
    return 0;
}